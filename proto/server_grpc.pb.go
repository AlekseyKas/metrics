// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsMClient is the client API for MetricsM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsMClient interface {
	// GET /
	GetMetricsJSON(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetricsJSONResponse, error)
	// GET /value/{typeMet}/{nameMet} and POST /value/
	GetMetricData(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*MetricData, error)
	// POST /updates
	SendMetricsJSON(ctx context.Context, in *SendMetricsJSONRequest, opts ...grpc.CallOption) (*Empty, error)
	// POST /update/{typeMet}/{nameMet}/{value} POST /update
	UpdateMetric(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error)
}

type metricsMClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsMClient(cc grpc.ClientConnInterface) MetricsMClient {
	return &metricsMClient{cc}
}

func (c *metricsMClient) GetMetricsJSON(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetricsJSONResponse, error) {
	out := new(GetMetricsJSONResponse)
	err := c.cc.Invoke(ctx, "/proto.MetricsM/GetMetricsJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsMClient) GetMetricData(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*MetricData, error) {
	out := new(MetricData)
	err := c.cc.Invoke(ctx, "/proto.MetricsM/GetMetricData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsMClient) SendMetricsJSON(ctx context.Context, in *SendMetricsJSONRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.MetricsM/SendMetricsJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsMClient) UpdateMetric(ctx context.Context, in *MetricData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.MetricsM/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsMServer is the server API for MetricsM service.
// All implementations must embed UnimplementedMetricsMServer
// for forward compatibility
type MetricsMServer interface {
	// GET /
	GetMetricsJSON(context.Context, *Empty) (*GetMetricsJSONResponse, error)
	// GET /value/{typeMet}/{nameMet} and POST /value/
	GetMetricData(context.Context, *Metric) (*MetricData, error)
	// POST /updates
	SendMetricsJSON(context.Context, *SendMetricsJSONRequest) (*Empty, error)
	// POST /update/{typeMet}/{nameMet}/{value} POST /update
	UpdateMetric(context.Context, *MetricData) (*Empty, error)
	mustEmbedUnimplementedMetricsMServer()
}

// UnimplementedMetricsMServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsMServer struct {
}

func (UnimplementedMetricsMServer) GetMetricsJSON(context.Context, *Empty) (*GetMetricsJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsJSON not implemented")
}
func (UnimplementedMetricsMServer) GetMetricData(context.Context, *Metric) (*MetricData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricData not implemented")
}
func (UnimplementedMetricsMServer) SendMetricsJSON(context.Context, *SendMetricsJSONRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetricsJSON not implemented")
}
func (UnimplementedMetricsMServer) UpdateMetric(context.Context, *MetricData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedMetricsMServer) mustEmbedUnimplementedMetricsMServer() {}

// UnsafeMetricsMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsMServer will
// result in compilation errors.
type UnsafeMetricsMServer interface {
	mustEmbedUnimplementedMetricsMServer()
}

func RegisterMetricsMServer(s grpc.ServiceRegistrar, srv MetricsMServer) {
	s.RegisterService(&MetricsM_ServiceDesc, srv)
}

func _MetricsM_GetMetricsJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsMServer).GetMetricsJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsM/GetMetricsJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsMServer).GetMetricsJSON(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsM_GetMetricData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsMServer).GetMetricData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsM/GetMetricData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsMServer).GetMetricData(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsM_SendMetricsJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMetricsJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsMServer).SendMetricsJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsM/SendMetricsJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsMServer).SendMetricsJSON(ctx, req.(*SendMetricsJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsM_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsMServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsM/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsMServer).UpdateMetric(ctx, req.(*MetricData))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsM_ServiceDesc is the grpc.ServiceDesc for MetricsM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricsM",
	HandlerType: (*MetricsMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsJSON",
			Handler:    _MetricsM_GetMetricsJSON_Handler,
		},
		{
			MethodName: "GetMetricData",
			Handler:    _MetricsM_GetMetricData_Handler,
		},
		{
			MethodName: "SendMetricsJSON",
			Handler:    _MetricsM_SendMetricsJSON_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _MetricsM_UpdateMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
